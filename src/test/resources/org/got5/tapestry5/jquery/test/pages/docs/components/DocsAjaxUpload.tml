<html t:type="layoutWithAccordion" t:activeElement="1" 
	t:title="AJAX Upload" 
      xmlns:t="http://tapestry.apache.org/schema/tapestry_5_1_0.xsd" 
      xmlns:p="tapestry:parameter"
      xmlns:j="tapestry-library:jquery">

    <t:jquery.tabs  t:listTabData="prop:listTabData" t:activePanelId="0" />

    <t:block id="docs">
        <t:componentDocumentation>
            <p:title>
                AJAX/XHR/iFrame upload component
            </p:title>
            <p:description>
                Upload single or multiple files using either an XHR POST or (in case of Opera and IE) regular POSTs
                through an invisible iFrame.<br />
                Triggered events: 
                <table>
                    <thead><tr><th>Event</th><th>Description</th></tr></thead>
                    <tbody>
                        <tr>
                            <td>JQueryEventConstants.AJAX_UPLOAD ("ajaxFileUpload")</td>
                            <td>
                                Triggered in case of an XHR file upload. The event handler may return renderable objects such as
                                MultiZoneUpdate. <em>null</em> is also possible and will result in a regular rendering of the
                                success json.<br/>
                                
                            </td>
                        </tr>
                        <tr>
                            <td>JQueryEventConstants.NON_XHR_UPLOAD ("fileUpload")</td>
                            <td>
                                Triggered in case of a regular file upload using the iFrame fallback.<br />
                                The event handler cannot return a MultiZoneUpdate or similar. Only JSONObjects are supported.<br />
                                If you need other parts of your page to rerender after the upload took place you can
                                return a JSONObject with the following structure to trigger a custom event (which will be a separate XHR call): <br />
<pre>
{
    AjaxUpload.UPDATE_ZONE_CALLBACK : {
        url : /consult the ComponentResources to generate one/,
        zoneId : /insert your zone id in here/
    }
}   
</pre>
                                <em>null</em> as a result will cause a simple response like { "success" : "true" } in case 
                                a file has been uploaded. 
                            </td>
                        </tr>
                    </tbody>
                </table>
                
                <p>Example for JQueryEventConstants.AJAX_UPLOAD event handler:</p>
                <div t:type="jquery/showSource" t:ext="java" t:beginLine="63" t:endLine="74" t:path="java/org/got5/tapestry5/jquery/test/pages/docs/components/DocsAjaxUpload.java"></div>
                
                <p>Example for JQueryEventConstants.NON_XHR_UPLOAD event handler with custom event handler for the additional zone refresh:</p>
                <div t:type="jquery/showSource" t:ext="java" t:beginLine="76" t:endLine="100" t:path="java/org/got5/tapestry5/jquery/test/pages/docs/components/DocsAjaxUpload.java"></div>
            </p:description>
            
            <p:link_1>The original JS library: <t:componentLink t:url="https://github.com/valums/file-uploader"/></p:link_1>
            <p:link_3>Inspiration for the AjaxUploadDecoder: <t:componentLink t:url="https://github.com/tawus/tawus/tree/master/tawus-ajaxupload"/></p:link_3>
        
            <p:param_1>
                <t:componentParameter
                    t:name="multiple"
                    t:required="false"
                    t:javaType="boolean"
                    t:prefix="prop"
                    t:defaultValue="false"
                    t:description="Enables multiple file uploads."
                />
            </p:param_1>
            <p:param_2>
                <t:componentParameter
                    t:name="allowedExtensions"
                    t:required="false"
                    t:javaType="String"
                    t:prefix="literal"
                    t:description="Defines allowed extensions. All files are allowed by default."
                />
            </p:param_2>
            <p:param_3>
                <t:componentParameter
                    t:name="sizeLimit"
                    t:required="false"
                    t:javaType="JSONObject"
                    t:prefix="literal"
                    t:defaultValue="0"
                    t:description="Defines the maximum size of one single file in bytes. 
                                   If the number has a trailing K, M or G the limit will 
                                   be calculated accordingly (base 2). A value of 10M will result 
                                   a limit of 10 * 1024 * 1024 byte = 10 MiB. 
                                   No limit by default."
                />
            </p:param_3>
            <p:param_4>
                <t:componentParameter
                    t:name="maxConnections"
                    t:required="false"
                    t:javaType="int"
                    t:prefix="prop"
                    t:defaultValue="3"
                    t:description="Limits the amount of parallel uploads."
                />
            </p:param_4>
            <p:param_5>
                <t:componentParameter
                    t:name="params"
                    t:required="false"
                    t:javaType="JSONObject"
                    t:prefix="prop"
                    t:description="Gives you the full control over all parameters. Please read
                                   the documentation of valum's file-uploader.
                                   Besides the already mentioned parameters the messages can also
                                   be overridden by either specifying them in your own global 
                                   message bundles or by passing the translated texts as parameters." 
                />
            </p:param_5>
        </t:componentDocumentation>
    </t:block>
    
    <t:block id="JSONParameters">
    
        <t:componentDocumentation>
            <p:title>
                API for the 'params' component parameter
            </p:title>

            <p:description>
                
                Note: If you define your own templates make sure you keep the original css classes.
                The file-uploader script looks for them to apply its functions (qq-upload-drop-area for the drop-area for example).

                <pre>
params = {
    messages : {            
        typeError: "{file} has invalid extension. Only {extensions} are allowed.",
        sizeError: "{file} is too large, maximum file size is {sizeLimit}.",
        minSizeError: "{file} is too small, minimum file size is {minSizeLimit}.",
        emptyError: "{file} is empty, please select files again without it.",
        onLeave: "The files are being uploaded, if you leave now the upload will be cancelled."

        // label for the default templates. 
        uploadLabel   : "regular upload field label",
        dropAreaLabel : "drop field label",
        cancelLabel   : "text for the cancel button", 
        failedLabel   : "error label"
    },

    // You can also override the internal event handler!
    // But beware: AjaxUpload's onComplete handler has some
    // tweaks included to make non-XHR uploads support 
    // zone-updates! Don't break it if you need it!
    onSubmit: function(id, fileName){},
    onProgress: function(id, fileName, loaded, total){},
    onComplete: function(id, fileName, responseJSON){},
    onCancel: function(id, fileName){},

    showMessagesDialog : "The id of your custom message dialog.",

    button: null,
    multiple: true,
    maxConnections: 3,
    // validation
    allowedExtensions: [],
    sizeLimit: 0,
    minSizeLimit: 0,

    // the template where to drop in your stuff
    template : "Define your own upload component template here",

    // that's the one that lists uploaded files, cancel link, etc.
    fileTemplate : "Define your own file template here."
}
                </pre>
            </p:description>
            
        </t:componentDocumentation>
        
    </t:block>

    <t:block id="example">
        
	    <j:ajaxUpload t:id="uploadImage" 
	                  t:multiple="true" 
	                  t:allowedExtensions="[jpg, png, gif]" 
	                  t:sizeLimit="1M"> <!-- The units K, M and G are valid for size limits. Anything else will be treated as 0 -->
	        <noscript>
	            <p>JavaScript must be activated!</p>
	        </noscript>
	    </j:ajaxUpload>
	
	    <t:zone t:id="uploadResult">
	        <div>
	            <t:if test="message">
	                <p>
	                    <strong>${message}</strong>
	                </p>
	            </t:if>
	
	            <t:if test="uploadedFiles">
	                <h4>Uploaded files</h4>
	                
	                <t:grid source="uploadedFiles"></t:grid>
	            </t:if>
	        </div>
	    </t:zone>

        <div t:type="jquery/showSource" t:ext="html" t:beginLine="183" t:endLine="206" t:path="resources/org/got5/tapestry5/jquery/test/pages/docs/components/DocsAjaxUpload.tml"></div>           
        <div t:type="jquery/showSource" t:ext="java" t:beginLine="63" t:endLine="100" t:path="java/org/got5/tapestry5/jquery/test/pages/docs/components/DocsAjaxUpload.java"></div>

    </t:block>

</html>
